
require File.join(File.dirname(__FILE__), '..', 'spec_helper')

RSpec.describe 'fractional 1' do
  it {
    f = Fractional.new(1)
    r = f.rational
    expect(r.numerator).to eq(1)
    expect(r.denominator).to eq(1)

    s = f.to_s
    expect(s).to eq('1')
  }
end

RSpec.describe 'fractional "0.5"' do
  it {
    f = Fractional.new("0.5")
    r = f.rational
    expect(r.numerator).to eq(1)
    expect(r.denominator).to eq(2)

    s = f.to_s
    expect(s).to eq('0.5')
  }
end

RSpec.describe 'fractional 1, 2' do
  it {
    f = Fractional.new(1, 2)
    r = f.rational
    expect(r.numerator).to eq(1)
    expect(r.denominator).to eq(2)

    s = f.to_s
    expect(s).to eq('0.5')
  }
end

RSpec.describe 'fractional Rational(1, 2)' do
  it {
    f = Fractional.new(Rational(1, 2))
    r = f.rational
    expect(r.numerator).to eq(1)
    expect(r.denominator).to eq(2)

    s = f.to_s
    expect(s).to eq('0.5')
  }
end

RSpec.describe 'fractional (10/3)' do
  it {
    f = Fractional.new(10, 3)
    r = f.rational
    expect(r.numerator).to eq(10)
    expect(r.denominator).to eq(3)

    s = f.to_s
    expect(s).to eq('3.{3}')
  }
end

RSpec.describe 'fractional (1/3)' do
  it {
    f = Fractional.new(1, 3)
    r = f.rational
    expect(r.numerator).to eq(1)
    expect(r.denominator).to eq(3)

    s = f.to_s
    expect(s).to eq('0.{3}')
  }
end

RSpec.describe 'fractional (1/4)' do
  it {
    f = Fractional.new(1, 4)
    r = f.rational
    expect(r.numerator).to eq(1)
    expect(r.denominator).to eq(4)

    s = f.to_s
    expect(s).to eq('0.25')
  }
end

RSpec.describe 'fractional 0.25' do
  it {
    f = Fractional.parse('0.25')
    r = f.rational
    expect(r.numerator).to eq(1)
    expect(r.denominator).to eq(4)

    s = f.to_s
    expect(s).to eq('0.25')
  }
end

RSpec.describe 'fractional 2.5' do
  it {
    f = Fractional.parse('2.5')
    r = f.rational
    expect(r.numerator).to eq(5)
    expect(r.denominator).to eq(2)

    s = f.to_s
    expect(s).to eq('2.5')
  }
end

RSpec.describe 'fractional (12)' do
  it {
    f = Fractional.new(12, 1)
    r = f.rational
    expect(r.numerator).to eq(12)
    expect(r.denominator).to eq(1)

    s = f.to_s
    expect(s).to eq('12')
  }
end

RSpec.describe 'fractional (12)' do
  it {
    f = Fractional.parse('12')
    r = f.rational
    expect(r.numerator).to eq(12)
    expect(r.denominator).to eq(1)

    s = f.to_s
    expect(s).to eq('12')
  }
end

RSpec.describe 'fractional (0.{9})' do
  it {
    f = Fractional.parse('0.{9}')
    r = f.rational
    expect(r.numerator).to eq(1)
    expect(r.denominator).to eq(1)

    s = f.to_s
    expect(s).to eq('1')
  }
end

RSpec.describe 'fractional (1/1) ... (1/120)' do
  data = [
    [ 1,  1, "1/1",  "1"],
    [ 1,  2, "1/2",  "0.5"],
    [ 1,  3, "1/3",  "0.{3}"],
    [ 1,  4, "1/4",  "0.25"],
    [ 1,  5, "1/5",  "0.2"],
    [ 1,  6, "1/6",  "0.1{6}"],
    [ 1,  7, "1/7",  "0.{142857}"],
    [ 1,  8, "1/8",  "0.125"],
    [ 1,  9, "1/9",  "0.{1}"],
    [ 1, 10, "1/10",  "0.1"],
    [ 1, 11, "1/11",  "0.{09}"],
    [ 1, 12, "1/12",  "0.08{3}"],
    [ 1, 13, "1/13",  "0.{076923}"],
    [ 1, 14, "1/14",  "0.0{714285}"],
    [ 1, 15, "1/15",  "0.0{6}"],
    [ 1, 16, "1/16",  "0.0625"],
    [ 1, 17, "1/17",  "0.{0588235294117647}"],
    [ 1, 18, "1/18",  "0.0{5}"],
    [ 1, 19, "1/19",  "0.{052631578947368421}"],
    [ 1, 20, "1/20",  "0.05"],
    [ 1, 21, "1/21",  "0.{047619}"],
    [ 1, 22, "1/22",  "0.0{45}"],
    [ 1, 23, "1/23",  "0.{0434782608695652173913}"],
    [ 1, 24, "1/24",  "0.041{6}"],
    [ 1, 25, "1/25",  "0.04"],
    [ 1, 26, "1/26",  "0.0{384615}"],
    [ 1, 27, "1/27",  "0.{037}"],
    [ 1, 28, "1/28",  "0.03{571428}"],
    [ 1, 29, "1/29",  "0.{0344827586206896551724137931}"],
    [ 1, 30, "1/30",  "0.0{3}"],
    [ 1, 31, "1/31",  "0.{032258064516129}"],
    [ 1, 32, "1/32",  "0.03125"],
    [ 1, 33, "1/33",  "0.{03}"],
    [ 1, 34, "1/34",  "0.0{2941176470588235}"],
    [ 1, 35, "1/35",  "0.0{285714}"],
    [ 1, 36, "1/36",  "0.02{7}"],
    [ 1, 37, "1/37",  "0.{027}"],
    [ 1, 38, "1/38",  "0.0{263157894736842105}"],
    [ 1, 39, "1/39",  "0.{025641}"],
    [ 1, 40, "1/40",  "0.025"],
    [ 1, 41, "1/41",  "0.{02439}"],
    [ 1, 42, "1/42",  "0.0{238095}"],
    [ 1, 43, "1/43",  "0.{023255813953488372093}"],
    [ 1, 44, "1/44",  "0.02{27}"],
    [ 1, 45, "1/45",  "0.0{2}"],
    [ 1, 46, "1/46",  "0.0{2173913043478260869565}"],
    [ 1, 47, "1/47",  "0.{0212765957446808510638297872340425531914893617}"],
    [ 1, 48, "1/48",  "0.0208{3}"],
    [ 1, 49, "1/49",  "0.{020408163265306122448979591836734693877551}"],
    [ 1, 50, "1/50",  "0.02"],
    [ 1, 51, "1/51",  "0.{0196078431372549}"],
    [ 1, 52, "1/52",  "0.01{923076}"],
    [ 1, 53, "1/53",  "0.{0188679245283}"],
    [ 1, 54, "1/54",  "0.0{185}"],
    [ 1, 55, "1/55",  "0.0{18}"],
    [ 1, 56, "1/56",  "0.017{857142}"],
    [ 1, 57, "1/57",  "0.{017543859649122807}"],
    [ 1, 58, "1/58",  "0.0{1724137931034482758620689655}"],
    [ 1, 59, "1/59",  "0.{0169491525423728813559322033898305084745762711864406779661}"],
    [ 1, 60, "1/60",  "0.01{6}"],
    [ 1, 61, "1/61",  "0.{016393442622950819672131147540983606557377049180327868852459}"],
    [ 1, 62, "1/62",  "0.0{161290322580645}"],
    [ 1, 63, "1/63",  "0.{015873}"],
    [ 1, 64, "1/64",  "0.015625"],
    [ 1, 65, "1/65",  "0.0{153846}"],
    [ 1, 66, "1/66",  "0.0{15}"],
    [ 1, 67, "1/67",  "0.{014925373134328358208955223880597}"],
    [ 1, 68, "1/68",  "0.01{4705882352941176}"],
    [ 1, 69, "1/69",  "0.{0144927536231884057971}"],
    [ 1, 70, "1/70",  "0.0{142857}"],
    [ 1, 71, "1/71",  "0.{01408450704225352112676056338028169}"],
    [ 1, 72, "1/72",  "0.013{8}"],
    [ 1, 73, "1/73",  "0.{01369863}"],
    [ 1, 74, "1/74",  "0.0{135}"],
    [ 1, 75, "1/75",  "0.01{3}"],
    [ 1, 76, "1/76",  "0.01{315789473684210526}"],
    [ 1, 77, "1/77",  "0.{012987}"],
    [ 1, 78, "1/78",  "0.0{128205}"],
    [ 1, 79, "1/79",  "0.{0126582278481}"],
    [ 1, 80, "1/80",  "0.0125"],
    [ 1, 81, "1/81",  "0.{012345679}"],
    [ 1, 82, "1/82",  "0.0{12195}"],
    [ 1, 83, "1/83",  "0.{01204819277108433734939759036144578313253}"],
    [ 1, 84, "1/84",  "0.01{190476}"],
    [ 1, 85, "1/85",  "0.0{1176470588235294}"],
    [ 1, 86, "1/86",  "0.0{116279069767441860465}"],
    [ 1, 87, "1/87",  "0.{0114942528735632183908045977}"],
    [ 1, 88, "1/88",  "0.011{36}"],
    [ 1, 89, "1/89",  "0.{01123595505617977528089887640449438202247191}"],
    [ 1, 90, "1/90",  "0.0{1}"],
    [ 1, 91, "1/91",  "0.{010989}"],
    [ 1, 92, "1/92",  "0.01{0869565217391304347826}"],
    [ 1, 93, "1/93",  "0.{010752688172043}"],
    [ 1, 94, "1/94",  "0.0{1063829787234042553191489361702127659574468085}"],
    [ 1, 95, "1/95",  "0.0{105263157894736842}"],
    [ 1, 96, "1/96",  "0.01041{6}"],
    [ 1, 97, "1/97",  "0.{010309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567}"],
    [ 1, 98, "1/98",  "0.0{102040816326530612244897959183673469387755}"],
    [ 1, 99, "1/99",  "0.{01}"],
    [ 1,100, "1/100",  "0.01"],
    [ 1,101, "1/101",  "0.{0099}"],
    [ 1,102, "1/102",  "0.0{0980392156862745}"],
    [ 1,103, "1/103",  "0.{0097087378640776699029126213592233}"],
    [ 1,104, "1/104",  "0.009{615384}"],
    [ 1,105, "1/105",  "0.0{095238}"],
    [ 1,106, "1/106",  "0.0{0943396226415}"],
    [ 1,107, "1/107",  "0.{00934579439252336448598130841121495327102803738317757}"],
    [ 1,108, "1/108",  "0.00{925}"],
    [ 1,109, "1/109",  "0.{009174311926605504587155963302752293577981651376146788990825688073394495412844036697247706422018348623853211}"],
    [ 1,110, "1/110",  "0.0{09}"],
    [ 1,111, "1/111",  "0.{009}"],
    [ 1,112, "1/112",  "0.0089{285714}"],
    [ 1,113, "1/113",  "0.{0088495575221238938053097345132743362831858407079646017699115044247787610619469026548672566371681415929203539823}"],
    [ 1,114, "1/114",  "0.0{087719298245614035}"],
    [ 1,115, "1/115",  "0.0{0869565217391304347826}"],
    [ 1,116, "1/116",  "0.00{8620689655172413793103448275}"],
    [ 1,117, "1/117",  "0.{008547}"],
    [ 1,118, "1/118",  "0.0{0847457627118644067796610169491525423728813559322033898305}"],
    [ 1,119, "1/119",  "0.{008403361344537815126050420168067226890756302521}"],
    [ 1,120, "1/120",  "0.008{3}"],
  ]


  it {
    data.each do |t|
      f = Fractional.new(t[0], t[1])
      r = f.rational
      expect(r.numerator).to eq(t[0])
      expect(r.denominator).to eq(t[1])

      s = f.to_s
      expect(s).to eq(t[3])

      p t[3]
      f = Fractional.parse(t[3])
      r = f.rational
      expect(r.numerator).to eq(t[0])
      expect(r.denominator).to eq(t[1])

      s = f.to_s
      expect(s).to eq(t[3])
    end
  }
end
